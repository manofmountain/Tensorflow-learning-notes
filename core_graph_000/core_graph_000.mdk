Title         : Tensorflow核心代码解析之计算图篇其一
Author        : manofmountain
Logo          : True

[TITLE]

# 介绍 

当今计算机科学给人对未来最大想象的莫过于人工智能的大规模应用前景。它对于人类文明进步所带来的潜在贡献可以被视为与四大发明、蒸汽机、电力、计算机等人类史标杆性工具具有同等的地位。当今人工智能的蓬勃发展主要是机器学习尤其是深度学习的大规模成功应用。凭着日益增多的海量数据，快速发展的计算机并行计算能力，快速迭代、高效更新的各种模型、算法、策略以及各个国家、政府、大企业对它的日益重视与超高的资金、政策投入，当今AI的发展速度真可谓一日千里！

深度学习最终要与具体行业场景有效率地结合起来才能发挥出其效益来。当下的整个深度学习已经行成了良好的产业链体系。最下端的是用于深度学习加速的各种硬件芯片如CPU/GPU/FPGA/ASIC专用芯片等。目前此领域里面GPU凭其优良的超多弱核心并行计算能力独领风骚；但CPU在推理加速、成本等方面也挺有竞争力；FPGA凭其灵活性也非常适宜于进行AI方案的原型设计，但因其开发难度较大，生态相对较缺乏，当下大公司里面大规模部署应用FPGA的唯有微软；至于ASIC专用芯片，可谓是给了诸多有心在AI半导体上面实现弯道超车的公司一个很好的机会，尤其是那些有着大规模机器学习用户，可以基于上层封装提供AI云计算实例服务的公司如Google就声势浩大地推出了自己快速迭代着的TPU，号称常规模型（如Resnet-50）加速快于最新的GPU，同时功耗更为节省，其它像Amazon，Facebook，Ali等云计算公司也在搞自己的AI专用ASIC芯片。此外一些创业型公司也对此雄心勃勃，国内已经涌现出了一堆此类的独角兽像卖自家矿机发了大财的Bit大陆，技术势力雄厚的地平线等等。还有些手机大厂则将精力用在了终端一侧的AI芯片研发像华为、苹果等已经有了自己的AI芯片并部署在了自己的手机新品当中，其它像小米、三星等也在纷纷跟进。需要提下的是ARM这个在移动时代的主要得意者也于最近发布了自己家设计的用于AI加速的各种硬件IP。

计算芯片向上走则是将一些基本运算如矩阵乘积、各类型卷积运算等结合硬件平台优化过了的数学计算库如用于Intel CPU端的MKL/MKLDNN，用于nVidia GPU的CUDA/cuDNN，用于FPGA专用DNN网络加速过的openCL，还有针对各大ASIC芯片产商针对自己ASIC加速过了的种种计算库套件。这些数学计算库基本由AI芯片产商自己来完成，目的即在于借用软件的力量给自家的硬件以强大的驱动力。一般他们会选择将优化过了的核心程序开源、公布出来为自己的客户所借鉴、使用，最终通过AI芯片的出售来获得价值。值得一提的是nVIDIA在基于CUDA/cuDNN上面的多年耕耘，相关社区、生态的耐心培养直接带来了它们今天的巨大成功。现在半导体公司已经再不同往日只需要卖出芯片即可了。芯片相关的软件库（并行计算库等）的性能，对用户提供API的友好性，用户社区的培养，用户支持的力度等等软实力真正是愈益重要。

底层计算库再向上走则是使用这些优化过了的数学计算库来完成基本类型计算，然后将之抽象封装后向上提供出友好用户API的深度学习框架。这些深度学习框架是我们软件人员开发应用的基本工具。当前最流行的框架有Google的Tensorflow，Facebook的Pytorch，Amazon的Mxnet，微软的CNTK，当然还有传统社区在维护的bvlc/Caffe等等。它们大都提供类似的功能，相似的API用于用户程序构建计算图，并能将图方便地导入、导出为序列化文件，还提供了基于Framework level对图的一些优化如合并(fusion)，去重（典型的如CSE），并行计算（通过使用OMP等并行库）等，此外还有一些功能如用于进行内存分配、管理及线程执行、调度、检测的session/workspace等，当然还有用于具体执行某计算的op / kernel等，这也是常规计算优化的核心所在。

在这些计算框架中，无疑Google brain团队开发的Tensorflow是最为流行的。它的框架设计最为复杂，可以天生地支持模型并行训练、推理等，它的背后有一个google强大的开发团队在快速迭代、开发，它的底下也有集成当前最好的像cuDNN/mklDNN/TensorRT等加速技术，它的用户社区也已经非常完善、活跃（作为程序员这个还是蛮重要的。毕竟在APP开发中出了问题，肯定都希望通过在网上翻一下看有没有人踩过类似的坑以来快速解决问题。）。

当下对于如何使用Tensorflow来开发一个AI程序，构建深度学习模型并进行训练或推理的文章已经很多了。本系列单元中笔者想试着跟大家一起理一下它框架核心的一些代码实现。无益它对于我们基于TF做一些开发，加深对TF的理解是很有帮助的。此外TF框架的设计、代码实现非常良好，对它们的理解、梳理清楚对于我们日常的软件设计、开发也会有较强的工程借鉴意义。

* Read the [reference manual].
* Explore the upper-right toolbox menu to discover how Markdown works. 
* `Alt-Q` reformats the current paragraph.

Enjoy!

[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
